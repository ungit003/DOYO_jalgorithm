import java.io.*;
import java.util.*;

class Edge {
    int from, to, cost;

    public Edge(int from, int to, int cost) {
        this.from = from;
        this.to = to;
        this.cost = cost;
    }
}

public class BOJ_1647 {
    static int[] parent;

     static int find(int x) {
        if (parent[x] == x) return x;
        return parent[x] = find(parent[x]);
    }

     static void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            parent[rootY] = rootX;
        }
    }

     static int compareEdges(Edge e1, Edge e2) {
        return Integer.compare(e1.cost, e2.cost);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken()); // Number of houses
        int M = Integer.parseInt(st.nextToken()); // Number of roads

        List<Edge> edges = new ArrayList<>();

        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int A = Integer.parseInt(st.nextToken());
            int B = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            edges.add(new Edge(A, B, C));
        }

         edges.sort(Main::compareEdges);

         parent = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            parent[i] = i;
        }

        int totalCost = 0;
        int maxEdgeCost = 0; // To keep track of the largest edge in the MST

         for (Edge edge : edges) {
            if (find(edge.from) != find(edge.to)) {
                union(edge.from, edge.to);
                totalCost += edge.cost;
                maxEdgeCost = edge.cost; // Update the largest edge cost
            }
        }

         System.out.println(totalCost - maxEdgeCost);
    }
}
