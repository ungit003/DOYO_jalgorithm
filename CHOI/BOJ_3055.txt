import java.util.*;

public class BOJ_3055 {
    static int R, C;
    static char[][] map;
    static int[][] distD, distW;
    static LinkedList<int[]> queueD, queueW;
    static int[] dx = {0, 0, 1, -1};  // 상, 하, 좌, 우
    static int[] dy = {1, -1, 0, 0};

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        R = sc.nextInt();
        C = sc.nextInt();
        map = new char[R][C];
        distD = new int[R][C];  // 고슴도치 거리
        distW = new int[R][C];  // 물 거리
        queueD = new LinkedList<>();
        queueW = new LinkedList<>();
        
        // 지도 입력
        for (int i = 0; i < R; i++) {
            String line = sc.next();  // 문자열 입력 받기
            for (int j = 0; j < C; j++) {
                map[i][j] = line.charAt(j); // charAt 대신 인덱스로 직접 접근
                if (map[i][j] == 'S') {
                    queueD.add(new int[] {i, j});  // 고슴도치의 시작 위치
                    distD[i][j] = 1;
                } else if (map[i][j] == 'D') {
                    distD[i][j] = -1; // 비버의 굴
                } else if (map[i][j] == '*') {
                    queueW.add(new int[] {i, j});  // 물의 시작 위치
                    distW[i][j] = 1;
                }
            }
        }
        
        // 물의 BFS
        while (!queueW.isEmpty()) {
            int[] curr = queueW.remove();  // 큐에서 첫 번째 원소를 꺼냄
            for (int i = 0; i < 4; i++) {
                int nx = curr[0] + dx[i];
                int ny = curr[1] + dy[i];
                if (nx >= 0 && nx < R && ny >= 0 && ny < C && map[nx][ny] == '.' && distW[nx][ny] == 0) {
                    distW[nx][ny] = distW[curr[0]][curr[1]] + 1;
                    queueW.add(new int[] {nx, ny});  // 물의 새로운 위치 큐에 추가
                }
            }
        }

        // 고슴도치의 BFS
        while (!queueD.isEmpty()) {
            int[] curr = queueD.remove();  // 큐에서 첫 번째 원소를 꺼냄
            for (int i = 0; i < 4; i++) {
                int nx = curr[0] + dx[i];
                int ny = curr[1] + dy[i];
                if (nx >= 0 && nx < R && ny >= 0 && ny < C && map[nx][ny] == '.' && distD[nx][ny] == 0) {
                    // 물이 이미 찬 곳은 못 가므로 skip
                    if (distW[nx][ny] == 0 || distD[curr[0]][curr[1]] + 1 < distW[nx][ny]) {
                        distD[nx][ny] = distD[curr[0]][curr[1]] + 1;
                        queueD.add(new int[] {nx, ny});  // 고슴도치의 새로운 위치 큐에 추가
                    }
                } else if (nx >= 0 && nx < R && ny >= 0 && ny < C && map[nx][ny] == 'D') {
                    // 비버의 굴에 도달하면
                    System.out.println(distD[curr[0]][curr[1]]);
                    return;
                }
            }
        }

        // 도달할 수 없으면 KAKTUS
        System.out.println("KAKTUS");
    }
}
