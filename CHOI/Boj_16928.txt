import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt(); // 사다리의 수
        int M = sc.nextInt(); // 뱀의 수

        int[] board = new int[101];
        for (int i = 1; i <= 100; i++) {
            board[i] = i; // 디폴트 값 설정
        }

        // 사다리 정보 입력
        for (int i = 0; i < N; i++) {
            int start = sc.nextInt();
            int end = sc.nextInt();
            board[start] = end; // 사다리 연결
        }

        // 뱀 정보 입력
        for (int i = 0; i < M; i++) {
            int start = sc.nextInt();
            int end = sc.nextInt();
            board[start] = end; // 뱀 연결
        }

        // BFS로 최단 거리 계산
        System.out.println(bfs(board));
    }

    private static int bfs(int[] board) {
        Queue<Integer> queue = new LinkedList<>();
        int[] dist = new int[101]; // 이동 횟수 기록
        boolean[] visited = new boolean[101];

        queue.add(1); // 1번 칸에서 시작
        visited[1] = true;

        while (!queue.isEmpty()) {
            int current = queue.poll();

            // 100번 칸에 도착하면 최소 이동 횟수 반환
            if (current == 100) {
                return dist[current];
            }

            // 주사위 1~6까지 시도
            for (int dice = 1; dice <= 6; dice++) {
                int next = current + dice;

                if (next > 100 || visited[next]) continue;

                // 사다리나 뱀을 고려하여 이동
                next = board[next];
                if (!visited[next]) {
                    visited[next] = true;
                    dist[next] = dist[current] + 1; // 이동 횟수 갱신
                    queue.add(next);
                }
            }
        }

        return -1; // 도달 불가능한 경우
    }
}
